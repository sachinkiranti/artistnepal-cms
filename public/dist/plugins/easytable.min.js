(function () {
    "use strict";
    (function ($) {
        $.fn.easyTableA11y = function (options) {
            var defaultOptions = {
                label: "data-label",
                view: "786px",
                selector: null,
                ignoreSelector: null,
                css: {
                    trBottomBorder: "1px solid #000",
                    tdMarginRight: "10px !important",
                    tdFontWeight: "bold"
                }
            };

            var mergedOptions = $.extend({}, defaultOptions, options);

            var methods = {
                setProps: function (options) {
                    mergedOptions.label = options.label || defaultOptions.label;
                    mergedOptions.view = options.view || defaultOptions.view;
                    mergedOptions.selector = options.selector || defaultOptions.selector;
                    mergedOptions.ignoreSelector = options.ignoreSelector || defaultOptions.ignoreSelector;
                },
                updateRow: function ($row) {
                    applyDataAttributesToRow($row.closest('table'), $row);
                }
            };

            // Add data-label attributes for all rows in a table
            function applyDataAttributes($table) {
                $table.find("tr").each(function () {
                    applyDataAttributesToRow($table, $(this));
                });
            }

            // Add data-label attributes for a specific row
            function applyDataAttributesToRow($table, $row) {
                var thValues = [];
                $table.find("th").each(function () {
                    if ($(this).hasClass("no-label")) {
                        thValues.push(null);
                    } else {
                        thValues.push($(this).text().trim());
                    }
                });

                $row.find("td").each(function (tdIndex) {
                    var $th = $table.find("th").eq(tdIndex);
                    var thValue = thValues[tdIndex];

                    if (
                        mergedOptions.ignoreSelector &&
                        ($th.is(mergedOptions.ignoreSelector) ||
                            $(this).is(mergedOptions.ignoreSelector)) ||
                        thValue === null
                    ) {
                        $(this).removeAttr(mergedOptions.label);
                    } else {
                        $(this).attr(mergedOptions.label, thValue);
                    }
                });
            }

            // Generate dynamic CSS for responsive view
            function generateDynamicCSS(targetSelector, options) {
                return `
          @media screen and (max-width: ${options.view}) {
            ${targetSelector} th:not(.no-label) {
              display: none;
            }
            ${targetSelector} tr {
              display: flex;
              flex-wrap: wrap;
              border-bottom: ${options.css.trBottomBorder};
            }
            ${targetSelector} td {
              flex-basis: 100%;
              display: block;
              position: relative;
              padding: 5px 0;
            }
            ${targetSelector} td::before {
              content: attr(${options.label});
              display: block;
              font-weight: ${options.css.tdFontWeight};
              margin-bottom: 4px;
              margin-right: ${options.css.tdMarginRight};
            }
            ${targetSelector} td:not([${options.label}]):before {
              content: "" !important;
              display: none !important;
            }
          }
        `;
            }

            // Update CSS (unique per table)
            function updateDynamicCSS(selector, options, tableIndex) {
                var targetSelector = options.selector || selector;
                var dynamicCSS = generateDynamicCSS(targetSelector, options);

                var styleId = "easy-table-dynamic-css-" + tableIndex;
                $("#" + styleId).remove();

                var styleElement = document.createElement("style");
                styleElement.type = "text/css";
                styleElement.id = styleId;
                styleElement.appendChild(document.createTextNode(dynamicCSS));
                document.head.appendChild(styleElement);
            }

            // Initialize all tables in selection
            this.each(function (index) {
                var $table = $(this);
                applyDataAttributes($table);

                updateDynamicCSS(
                    mergedOptions.selector || "table",
                    mergedOptions,
                    index
                );
            });

            return methods;
        };
    })(jQuery);
})();
